import type React from "react";
import { useState } from "react";
import { Download, Copy, Check, Clock, Calendar } from "lucide-react";
import type { ScheduledActivity } from "../../types/planTypes";
import { Dialog, DialogContent, DialogTrigger } from "./ui/dialog";
import { Card, CardContent } from "./ui/card";
import { Button } from "./ui/button";

interface ExportDialogProps {
  activities: ScheduledActivity[];
  children: React.ReactNode;
}

const PlanPreviewCard = ({
  activities,
}: {
  activities: ScheduledActivity[];
}) => {
  const saturdayActivities = activities.filter((a) => a.day === "saturday");
  const sundayActivities = activities.filter((a) => a.day === "sunday");

  const DaySection = ({
    day,
    activities,
  }: {
    day: string;
    activities: ScheduledActivity[];
  }) => {
    if (activities.length === 0) return null;
    return (
      <div>
        <h3 className="font-bold text-lg text-slate-800 dark:text-slate-100 flex items-center gap-2 mb-3">
          <Calendar className="h-5 w-5 text-teal-500" />
          {day}
        </h3>
        <div className="relative pl-5">
          <div className="absolute left-2 top-2 bottom-2 w-0.5 bg-slate-200 dark:bg-slate-700 rounded-full"></div>
          {["morning", "afternoon", "evening"].map((slot) => {
            const slotActivities = activities.filter(
              (a) => a.timeSlot === slot
            );
            if (slotActivities.length === 0) return null;
            return (
              <div key={slot} className="relative mb-3">
                <div className="absolute -left-[18px] top-1.5 h-3 w-3 bg-white dark:bg-slate-800 border-2 border-teal-500 rounded-full"></div>
                <h4 className="font-semibold text-slate-600 dark:text-slate-300 capitalize flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  {slot}
                </h4>
                <ul className="mt-1 pl-1 space-y-1 text-sm text-slate-500 dark:text-slate-400">
                  {slotActivities.map((act) => (
                    <li key={act.id}>
                      • {act.name} {act.duration && `(${act.duration}min)`}
                    </li>
                  ))}
                </ul>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  return (
    <Card className="bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900/50">
      <CardContent className="p-6">
        <h2 className="text-2xl font-extrabold text-center mb-1 text-slate-800 dark:text-slate-100">
          🎉 My Weekend Plan 🎉
        </h2>
        <p className="text-center text-sm text-slate-500 dark:text-slate-400 mb-6">
          Generated by Weekendly
        </p>
        <div className="space-y-6">
          <DaySection day="Saturday" activities={saturdayActivities} />
          <DaySection day="Sunday" activities={sundayActivities} />
        </div>
      </CardContent>
    </Card>
  );
};

export function ExportDialog({ activities, children }: ExportDialogProps) {
  const [open, setOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("share");
  const [copied, setCopied] = useState(false);

  const generateTextSummary = () => {
    if (!activities || activities.length === 0) return "No activities planned!";
    const sat = activities.filter((a) => a.day === "saturday");
    const sun = activities.filter((a) => a.day === "sunday");
    let summary = "🎉 My Weekend Plan\n\n";
    const createDaySummary = (day: string, acts: ScheduledActivity[]) => {
      if (acts.length > 0) {
        summary += `📅 ${day.toUpperCase()}\n`;
        ["morning", "afternoon", "evening"].forEach((slot) => {
          const slotActs = acts.filter((a) => a.timeSlot === slot);
          if (slotActs.length > 0) {
            summary += `\n⏰ ${slot.toUpperCase()}\n`;
            slotActs.forEach((act) => {
              summary += `• ${act.name}${
                act.duration ? ` (${act.duration}min)` : ""
              }\n`;
            });
          }
        });
        summary += "\n";
      }
    };
    createDaySummary("Saturday", sat);
    createDaySummary("Sunday", sun);
    summary += "✨ Created with Weekendly";
    return summary;
  };

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(generateTextSummary()).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  const handleDownloadJSON = () => {
    const dataStr =
      "data:text/json;charset=utf-8," +
      encodeURIComponent(JSON.stringify({ weekendPlan: activities }, null, 2));
    const downloadAnchorNode = document.createElement("a");
    downloadAnchorNode.setAttribute("href", dataStr);
    downloadAnchorNode.setAttribute("download", "weekend-plan.json");
    document.body.appendChild(downloadAnchorNode);
    downloadAnchorNode.click();
    downloadAnchorNode.remove();
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger onClick={() => setOpen(true)} asChild>
        {children}
      </DialogTrigger>
      <DialogContent className=" max-h-[90vh] flex flex-col">
        <div className="flex-1 px-6 pb-6 overflow-y-auto space-y-6">
          <PlanPreviewCard activities={activities} />

          <div className="space-y-3">
            <div className="flex border-b border-slate-200 dark:border-slate-800">
              <button
                onClick={() => setActiveTab("share")}
                className={`px-4 py-2 text-sm font-medium transition-colors cursor-pointer ${
                  activeTab === "share"
                    ? "border-b-2 border-teal-500 text-teal-400"
                    : "text-slate-300 hover:text-slate-800 dark:hover:text-slate-200"
                }`}
              >
                Share Text
              </button>
              <button
                onClick={() => setActiveTab("json")}
                className={`px-4 py-2 text-sm font-medium transition-colors cursor-pointer ${
                  activeTab === "json"
                    ? "border-b-2 border-teal-500 text-teal-400"
                    : "text-slate-300 hover:text-slate-800 dark:hover:text-slate-200"
                }`}
              >
                Download JSON
              </button>
            </div>

            {activeTab === "share" && (
              <div className="space-y-3 pt-2">
                <p className="text-sm text-foreground">
                  Copy a simple text summary of your plan to share with friends.
                </p>
                <Button
                  onClick={handleCopyToClipboard}
                  variant="outline"
                  className="w-full flex items-center gap-2 justify-center text-secondary-foreground cursor-pointer"
                >
                  {copied ? (
                    <Check className="h-4 w-4 text-green-500" />
                  ) : (
                    <Copy className="h-4 w-4" />
                  )}
                  {copied ? "Copied to Clipboard!" : "Copy Text Summary"}
                </Button>
              </div>
            )}

            {activeTab === "json" && (
              <div className="space-y-3 pt-2">
                <p className="text-sm text-foreground">
                  Download the full plan data as a JSON file to save or import
                  later.
                </p>
                <Button
                  onClick={handleDownloadJSON}
                  variant="outline"
                  className="w-full flex items-center gap-2 justify-center text-secondary-foreground cursor-pointer"
                >
                  <Download className="h-4 w-4" /> Download as JSON
                </Button>
              </div>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
